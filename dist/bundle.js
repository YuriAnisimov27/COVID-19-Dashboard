/*! For license information please see bundle.js.LICENSE.txt */
(()=>{"use strict";var e={"./src/css/list.css":(e,t,l)=>{l.r(t)},"./src/css/style.css":(e,t,l)=>{l.r(t)},"./src/index.js":(e,t,l)=>{l.r(t);l("./src/css/style.css"),l("./src/css/list.css"),l("./src/modules/components/CountryList.component.js");console.log("hello")},"./src/modules/components/CountryList.component.js":(e,t,l)=>{l.r(t);var o=l("./src/modules/utils/helpers.js");const n=(0,o.default)("div","list-listHeader__left list__arrows"),r=(0,o.default)("div","list-listHeader__right list__arrows"),s=(0,o.default)("span","material-icons"),a=(0,o.default)("span","material-icons"),i=document.querySelector(".list"),d=(0,o.default)("div","list-listHeader"),c=(0,o.default)("div","listHeader__info"),u=(0,o.default)("span","list-listHeader__title"),f=(0,o.default)("span","list-listHeader__amount"),p=(0,o.default)("div","list-countries"),h=(0,o.default)("ul","list-countries-ul"),m=["Global confirmed","Global deaths","Global recovered"],b=["Confirmed","Deths","Recovered"],C={method:"GET",redirect:"follow"};let _,v=!1,T=0;function y(e){console.log(e)}function g(e,t){e.innerHTML=`${t}`}function w(e){e.innerHTML=""}function L(){(function(e){let t;switch(e){case 1:t=_.Countries.sort(((e,t)=>t.TotalDeaths-e.TotalDeaths));break;case 2:t=_.Countries.sort(((e,t)=>t.TotalRecovered-e.TotalRecovered));break;default:t=_.Countries.sort(((e,t)=>t.TotalConfirmed-e.TotalConfirmed))}return t})(T).forEach((e=>{const t=(0,o.default)("li","list-countries-ul__li"),l=(0,o.default)("div","li__nameblock"),n=(0,o.default)("div","li__infoblock"),r=(0,o.default)("span","nameblock__name"),s=e.CountryCode,a=(0,o.default)("img","nameblock__flag",["src",`https://www.countryflags.io/${s}/flat/32.png`]);r.innerHTML=`${e.Country}`,l.appendChild(r),l.appendChild(a),n.innerHTML=`${b[T]}: ${function(e,t){let l;switch(t){case 1:l=e.TotalDeaths;break;case 2:l=e.TotalRecovered;break;default:l=e.TotalConfirmed}return l}(e,T)}`,t.appendChild(l),t.appendChild(n),h.appendChild(t),t.addEventListener("click",(()=>{v?(document.querySelector(".set").classList.remove("set"),t.classList.add("set"),y(e)):(v=!0,t.classList.add("set"),y(e))}))}))}function H(e){switch(e){case 1:w(h),g(u,m[e]),g(f,_.Global.TotalDeaths),L();break;case 2:w(h),g(u,m[e]),g(f,_.Global.TotalRecovered),L();break;default:w(h),g(u,m[e]),g(f,_.Global.TotalConfirmed),L()}}function k(e){_=e,s.innerHTML="arrow_left",a.innerHTML="arrow_right",n.appendChild(s),r.appendChild(a),c.appendChild(u),c.appendChild(f),u.innerHTML=m[T],f.innerHTML=_.Global.TotalConfirmed,d.appendChild(n),d.appendChild(c),d.appendChild(r),p.appendChild(h),i.appendChild(d),i.appendChild(p),s.addEventListener("click",(()=>{T=T?T-1:2,H(T),v=!1})),a.addEventListener("click",(()=>{T=Math.abs(T+1)%3,H(T),v=!1})),L()}window.onload=function(){fetch("https://api.covid19api.com/summary",C).then((e=>e.json())).then((e=>k(e))).catch((e=>console.log("error",e)))}},"./src/modules/utils/helpers.js":(e,t,l)=>{function o(e,t,...l){let o=null;try{o=document.createElement(e)}catch(e){throw new Error("Unable to create HTML element",e)}return t&&o.classList.add(...t.split(" ")),l.length&&l.forEach((([e,t])=>{""===t?o.setAttribute(e,""):o.setAttribute(e,t)})),o}function n(e){const t=window.document.querySelector(e);t&&t.remove()}function r(e,t=null){if(!t)return JSON.parse(localStorage.getItem(e));localStorage.setItem(e,JSON.stringify(t))}l.r(t),l.d(t,{default:()=>o,removeElement:()=>n,storage:()=>r})}},t={};function l(o){if(t[o])return t[o].exports;var n=t[o]={exports:{}};return e[o](n,n.exports,l),n.exports}l.d=(e,t)=>{for(var o in t)l.o(t,o)&&!l.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},l.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),l.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},l("./src/index.js")})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,