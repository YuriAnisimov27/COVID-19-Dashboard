(()=>{"use strict";function e(e,t,...n){let i=null;try{i=document.createElement(e)}catch(e){throw new Error("Unable to create HTML element",e)}return t&&i.classList.add(...t.split(" ")),n.length&&n.forEach((([e,t])=>{""===t?i.setAttribute(e,""):i.setAttribute(e,t)})),i}function t(e,t=null){if(!t)return JSON.parse(localStorage.getItem(e));localStorage.setItem(e,JSON.stringify(t))}function n(e,t){fetch("https://api.covid19api.com/summary").then((e=>e.json())).then((n=>{const i=n.Countries.filter((t=>t.Country===e))[0];console.log("searchingCountryData",i),t.innerHTML=`\n      <ul>\n        <li>"Country": ${JSON.stringify(i.Country)}</li>\n        <li>"CountryCode": "${JSON.stringify(i.CountryCode)}"</li>\n        <li>"Slug": "${JSON.stringify(i.Slug)}"</li>\n        <li>"NewConfirmed": ${JSON.stringify(i.NewConfirmed)}</li>\n        <li>"TotalConfirmed": ${JSON.stringify(i.TotalConfirmed)}</li>\n        <li>"NewDeaths": ${JSON.stringify(i.NewDeaths)}</li>\n        <li>"TotalDeaths": ${JSON.stringify(i.TotalDeaths)}</li>\n        <li>"NewRecovered": ${JSON.stringify(i.NewRecovered)}</li>\n        <li>"TotalRecovered": ${JSON.stringify(i.TotalRecovered)}</li>\n        <li>"Date": "${JSON.stringify(i.Date)}"</li>\n      </ul>\n      `})).catch((e=>console.error(e)))}class i{checkCountry(){this.bar="Hello world"}createTable(){const i=document.querySelector(".table"),o=document.querySelector("form"),l=document.querySelector("#country"),r=document.querySelector(".table-btn__info"),a=e("div","dataTable");i.append(a),function(e){fetch("https://api.covid19api.com/summary").then((e=>e.json())).then((n=>{t("Global data",n.Global),e.innerHTML=`\n      <ul>\n        <li>"Total Confirmed": ${JSON.stringify(n.Global.TotalConfirmed)}</li>\n        <li>"Total Deaths": ${JSON.stringify(n.Global.TotalDeaths)}</li>\n        <li>"Total Recovered": ${JSON.stringify(n.Global.TotalRecovered)}</li>\n      </ul>\n      `})).catch((e=>console.error(e)))}(a),o.addEventListener("submit",(e=>{e.preventDefault(),n(l.value,a),l.value=""})),l.addEventListener("input",(t=>{a.innerHTML="",fetch("https://api.covid19api.com/summary").then((e=>e.json())).then((i=>{i.Countries.filter((e=>e.Country.toLowerCase().startsWith(t.target.value))).forEach((t=>{const i=e("p");i.textContent=t.Country,i.addEventListener("click",(()=>{l.value=i.textContent,n(l.value,a),r.textContent="Dashboard navigation"})),a.append(i)}))}))})),this.changeData()}changeData(){this.bar="Hello world";let e=0;const n=["total number of cases","number of cases in the last day ","the total number of cases of the disease per 100 thousand population","the number of cases of the disease in the last day per 100 thousand population"],i=document.querySelector(".table-btn__left"),o=document.querySelector(".table-btn__right"),l=document.querySelector(".table-btn__info"),r=document.querySelector(".dataTable");function a(e){switch(l.textContent=n[e],e){case 1:return void function(e){const n=t("Global data");e.innerHTML=`\n  <ul>\n    <li>"Confirmed": ${JSON.stringify(n.NewConfirmed)}</li>\n    <li>"Deaths": ${JSON.stringify(n.NewDeaths)}</li>\n    <li>"Recovered": ${JSON.stringify(n.NewRecovered)}</li>\n  </ul>\n  `}(r);case 2:return void function(e){const n=t("Global data");e.innerHTML=`\n  <ul>\n    <li>"Confirmed": ${(JSON.stringify(n.TotalConfirmed)/78e8*1e5).toFixed(3)}</li>\n    <li>"Deaths": ${(JSON.stringify(n.TotalDeaths)/78e8*1e5).toFixed(3)}</li>\n    <li>"Recovered": ${(JSON.stringify(n.TotalRecovered)/78e8*1e5).toFixed(3)}</li>\n  </ul>\n  `}(r);case 3:return void function(e){const n=t("Global data");e.innerHTML=`\n  <ul>\n    <li>"Confirmed": ${(JSON.stringify(n.NewConfirmed)/78e8*1e5).toFixed(3)}</li>\n    <li>"Deaths": ${(JSON.stringify(n.NewDeaths)/78e8*1e5).toFixed(3)}</li>\n    <li>"Recovered": ${(JSON.stringify(n.NewRecovered)/78e8*1e5).toFixed(3)}</li>\n  </ul>\n  `}(r);default:!function(e){const n=t("Global data");e.innerHTML=`\n  <ul>\n    <li>"Confirmed": ${JSON.stringify(n.TotalConfirmed)}</li>\n    <li>"Deaths": ${JSON.stringify(n.TotalDeaths)}</li>\n    <li>"Recovered": ${JSON.stringify(n.TotalRecovered)}</li>\n  </ul>\n  `}(r)}}l.textContent=n[e],i.addEventListener("click",(()=>{e=e?e-1:3,a(e)})),o.addEventListener("click",(()=>{e=Math.abs(e+1)%4,a(e)}))}}window.addEventListener("load",(()=>{(new i).createTable()}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,