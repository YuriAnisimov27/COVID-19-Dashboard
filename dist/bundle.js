(()=>{"use strict";function e(e,t,...l){let n=null;try{n=document.createElement(e)}catch(e){throw new Error("Unable to create HTML element",e)}return t&&n.classList.add(...t.split(" ")),l.length&&l.forEach((([e,t])=>{""===t?n.setAttribute(e,""):n.setAttribute(e,t)})),n}const t=e("div","list-listHeader__left list__arrows"),l=e("div","list-listHeader__right list__arrows"),n=e("span","material-icons"),i=e("span","material-icons"),o=document.querySelector(".list"),a=e("div","list-listHeader"),r=e("div","listHeader__info"),s=e("span","list-listHeader__title"),d=e("span","list-listHeader__amount"),c=e("div","list-countries"),p=e("ul","list-countries-ul"),h=["Global confirmed","Global deaths","Global recovered"],u=["Confirmed","Deths","Recovered"],f={method:"GET",redirect:"follow"};let C,_=!1,m=0;function T(e){C=e,n.innerHTML="arrow_left",i.innerHTML="arrow_right",t.appendChild(n),l.appendChild(i),r.appendChild(s),r.appendChild(d),s.innerHTML=h[m],d.innerHTML=C.Global.TotalConfirmed,a.appendChild(t),a.appendChild(r),a.appendChild(l),c.appendChild(p),o.appendChild(a),o.appendChild(c),n.addEventListener("click",(()=>{m=m?m-1:2,console.log(m),H(m),_=!1})),i.addEventListener("click",(()=>{m=Math.abs(m+1)%3,H(m),_=!1})),w()}function b(e){console.log(e)}function v(e,t){e.innerHTML=`${t}`}function L(e){e.innerHTML=""}function w(){(function(e){let t;switch(e){case 1:t=C.Countries.sort(((e,t)=>t.TotalDeaths-e.TotalDeaths));break;case 2:t=C.Countries.sort(((e,t)=>t.TotalRecovered-e.TotalRecovered));break;default:t=C.Countries.sort(((e,t)=>t.TotalConfirmed-e.TotalConfirmed))}return t})(m).forEach((t=>{const l=e("li","list-countries-ul__li"),n=e("div","li__nameblock"),i=e("div","li__infoblock"),o=e("span","nameblock__name"),a=e("img","nameblock__flag",["src",`https://www.countryflags.io/${t.CountryCode}/flat/32.png`]);o.innerHTML=`${t.Country}`,n.appendChild(o),n.appendChild(a),i.innerHTML=`${u[m]}: ${function(e,t){let l;switch(t){case 1:l=e.TotalDeaths;break;case 2:l=e.TotalRecovered;break;default:l=e.TotalConfirmed}return l}(t,m)}`,l.appendChild(n),l.appendChild(i),p.appendChild(l),l.addEventListener("click",(()=>{_?(document.querySelector(".set").classList.remove("set"),l.classList.add("set"),b(t)):(_=!0,l.classList.add("set"),b(t))}))}))}function H(e){switch(e){case 1:L(p),v(s,h[e]),v(d,C.Global.TotalDeaths),w();break;case 2:L(p),v(s,h[e]),v(d,C.Global.TotalRecovered),w();break;default:L(p),v(s,h[e]),v(d,C.Global.TotalConfirmed),w()}}window.onload=function(){fetch("https://api.covid19api.com/summary",f).then((e=>e.json())).then((e=>T(e))).catch((e=>console.log("error",e)))},console.log("hello")})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jb3ZpZC0xOS8uL3NyYy9tb2R1bGVzL3V0aWxzL2hlbHBlcnMuanMiLCJ3ZWJwYWNrOi8vY292aWQtMTkvLi9zcmMvbW9kdWxlcy9jb21wb25lbnRzL0NvdW50cnlMaXN0LmNvbXBvbmVudC5qcyIsIndlYnBhY2s6Ly9jb3ZpZC0xOS8uL3NyYy9pbmRleC5qcyJdLCJuYW1lcyI6WyJjcmVhdGUiLCJlbCIsImNsYXNzTmFtZXMiLCJkYXRhQXR0ciIsImVsZW1lbnQiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJlcnJvciIsIkVycm9yIiwiY2xhc3NMaXN0IiwiYWRkIiwic3BsaXQiLCJsZW5ndGgiLCJmb3JFYWNoIiwiYXR0ck5hbWUiLCJhdHRyVmFsdWUiLCJzZXRBdHRyaWJ1dGUiLCJhcnJvd0xlZnRCbG9jayIsImFycm93UmlnaHRCbG9jayIsImxlZnRBcnJvdyIsInJpZ2h0QXJyb3ciLCJsaXN0IiwicXVlcnlTZWxlY3RvciIsImxpc3RIZWFkZXIiLCJsaXN0SGVhZGVySW5mbyIsImxpc3RIZWFkZXJUaXRsZVRleHQiLCJsaXN0SGVhZGVyVGl0bGVBbW91bnQiLCJsaXN0T2ZDb3VudHJpZXMiLCJsaXN0T2ZDb3VudHJpZXNVbCIsImhlYWRlckFyciIsImNvdW50cmllc0FyciIsInJlcXVlc3RPcHRpb25zIiwibWV0aG9kIiwicmVkaXJlY3QiLCJyZXN1bHRHbG9iYWwiLCJzZXRlZCIsImNvdW50ZXIiLCJnZXREYXRhIiwicmVzdWx0IiwiaW5uZXJIVE1MIiwiYXBwZW5kQ2hpbGQiLCJHbG9iYWwiLCJUb3RhbENvbmZpcm1lZCIsImFkZEV2ZW50TGlzdGVuZXIiLCJjb25zb2xlIiwibG9nIiwiYXJyb3dDbGljayIsIk1hdGgiLCJhYnMiLCJjb3VudHJpZXNMaXN0QnVpbGRlciIsInNlbmREYXRhIiwiZGF0YSIsImNoYW5nZUVsIiwidG9DaGFuZ2UiLCJjbGVhckVsIiwicmVzIiwiQ291bnRyaWVzIiwic29ydCIsImEiLCJiIiwiVG90YWxEZWF0aHMiLCJUb3RhbFJlY292ZXJlZCIsInNvcnRSZXN1bHRCeUN1cnJlbnRDYXR0ZWdvcnkiLCJjb3VudHJ5IiwiY291bnRyeU5hbWVCbG9jayIsImNvdW50cnl0SW5mb0JMb2NrIiwiY291bnRyeU5hbWUiLCJjb3VudHJ5RmxhZyIsIkNvdW50cnkiLCJjdXJyZW50Q291bnRyeSIsImdldENvdW50cnlEYXRhIiwicmVtb3ZlIiwid2luZG93Iiwib25sb2FkIiwiZmV0Y2giLCJ0aGVuIiwicmVzcG9uc2UiLCJqc29uIiwiY2F0Y2giXSwibWFwcGluZ3MiOiJtQkFNZSxTQUFTQSxFQUFPQyxFQUFJQyxLQUFlQyxHQUNoRCxJQUFJQyxFQUFVLEtBQ2QsSUFDRUEsRUFBVUMsU0FBU0MsY0FBY0wsR0FDakMsTUFBT00sR0FDUCxNQUFNLElBQUlDLE1BQU0sZ0NBQWlDRCxHQWlCbkQsT0FkSUwsR0FDRkUsRUFBUUssVUFBVUMsT0FBT1IsRUFBV1MsTUFBTSxNQUd4Q1IsRUFBU1MsUUFDWFQsRUFBU1UsU0FBUSxFQUFFQyxFQUFVQyxNQUNULEtBQWRBLEVBQ0ZYLEVBQVFZLGFBQWFGLEVBQVUsSUFFL0JWLEVBQVFZLGFBQWFGLEVBQVVDLE1BSzlCWCxFQ3pCVCxNQUFNYSxFQUFpQmpCLEVBQU8sTUFBTyxzQ0FDL0JrQixFQUFrQmxCLEVBQU8sTUFBTyx1Q0FDaENtQixFQUFZbkIsRUFBTyxPQUFRLGtCQUMzQm9CLEVBQWFwQixFQUFPLE9BQVEsa0JBQzVCcUIsRUFBT2hCLFNBQVNpQixjQUFjLFNBQzlCQyxFQUFhdkIsRUFBTyxNQUFPLG1CQUMzQndCLEVBQWlCeEIsRUFBTyxNQUFPLG9CQUMvQnlCLEVBQXNCekIsRUFBTyxPQUFRLDBCQUNyQzBCLEVBQXdCMUIsRUFBTyxPQUFRLDJCQUN2QzJCLEVBQWtCM0IsRUFBTyxNQUFPLGtCQUNoQzRCLEVBQW9CNUIsRUFBTyxLQUFNLHFCQUNqQzZCLEVBQVksQ0FBQyxtQkFBb0IsZ0JBQWlCLG9CQUNsREMsRUFBZSxDQUFDLFlBQWEsUUFBUyxhQU10Q0Ms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SSxFQUFVTyxJQUN4Q2dCLEVBQVMxQixFQUF1QlEsRUFBYU8sT0FBT21CLGFBQ3BEWCxJQUNBLE1BQ0YsS0FBSyxFQUNISyxFQUFRMUIsR0FDUndCLEVBQVMzQixFQUFxQkksRUFBVU8sSUFDeENnQixFQUFTMUIsRUFBdUJRLEVBQWFPLE9BQU9vQixnQkFDcERaLElBQ0EsTUFDRixRQUNFSyxFQUFRMUIsR0FDUndCLEVBQVMzQixFQUFxQkksRUFBVU8sSUFDeENnQixFQUFTMUIsRUFBdUJRLEVBQWFPLE9BQU9DLGdCQUNwRE8sS0FLTnVCLE9BQU9DLE9BQVMsV0FDZEMsTUFBTSxxQ0FBc0MzQyxHQUN6QzRDLE1BQUtDLEdBQVlBLEVBQVNDLFNBQzFCRixNQUFLckMsR0FBVUQsRUFBUUMsS0FDdkJ3QyxPQUFNdkUsR0FBU3FDLFFBQVFDLElBQUksUUFBU3RDLE1Ddkp6Q3FDLFFBQVFDLElBQUksVSIsImZpbGUiOiJidW5kbGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogQHBhcmFtIHtTdHJpbmd9IGVsXHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBjbGFzc05hbWVzXHJcbiAqIEBwYXJhbSAgey4uLmFycmF5fSBkYXRhQXR0clxyXG4gKi9cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZShlbCwgY2xhc3NOYW1lcywgLi4uZGF0YUF0dHIpIHtcclxuICBsZXQgZWxlbWVudCA9IG51bGw7XHJcbiAgdHJ5IHtcclxuICAgIGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KGVsKTtcclxuICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgdGhyb3cgbmV3IEVycm9yKCdVbmFibGUgdG8gY3JlYXRlIEhUTUwgZWxlbWVudCcsIGVycm9yKTtcclxuICB9XHJcblxyXG4gIGlmIChjbGFzc05hbWVzKSB7XHJcbiAgICBlbGVtZW50LmNsYXNzTGlzdC5hZGQoLi4uY2xhc3NOYW1lcy5zcGxpdCgnICcpKTtcclxuICB9XHJcblxyXG4gIGlmIChkYXRhQXR0ci5sZW5ndGgpIHtcclxuICAgIGRhdGFBdHRyLmZvckVhY2goKFthdHRyTmFtZSwgYXR0clZhbHVlXSkgPT4ge1xyXG4gICAgICBpZiAoYXR0clZhbHVlID09PSAnJykge1xyXG4gICAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKGF0dHJOYW1lLCAnJyk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoYXR0ck5hbWUsIGF0dHJWYWx1ZSk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIGVsZW1lbnQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBAcGFyYW0ge1N0cmluZ30gY2xhc3NOYW1lIChTZWFyY2ggJiByZW1vdmUgZWxlbWVudCBpZiBpdCBleGlzdHMpXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZlRWxlbWVudChjbGFzc05hbWUpIHtcclxuICBjb25zdCBlbGVtZW50ID0gd2luZG93LmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoY2xhc3NOYW1lKTtcclxuICBpZiAoZWxlbWVudCkgZWxlbWVudC5yZW1vdmUoKTtcclxufVxyXG5cclxuLyoqXHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBOYW1lIChnZXR0ZXIpXHJcbiAqIEBwYXJhbSB7QW55fSBWYWx1ZSAoc2V0dGVyKVxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHN0b3JhZ2Uoa2V5LCBkYXRhID0gbnVsbCkge1xyXG4gIGlmICghZGF0YSkge1xyXG4gICAgcmV0dXJuIEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0oa2V5KSk7XHJcbiAgfVxyXG4gIGxvY2FsU3RvcmFnZS5zZXRJdGVtKGtleSwgSlNPTi5zdHJpbmdpZnkoZGF0YSkpO1xyXG59XHJcblxyXG4iLCJpbXBvcnQgJy4uL3V0aWxzL2hlbHBlcnMnO1xyXG5pbXBvcnQgY3JlYXRlIGZyb20gJy4uL3V0aWxzL2hlbHBlcnMnO1xyXG5cclxuY29uc3QgYXJyb3dMZWZ0QmxvY2sgPSBjcmVhdGUoJ2RpdicsICdsaXN0LWxpc3RIZWFkZXJfX2xlZnQgbGlzdF9fYXJyb3dzJyk7XHJcbmNvbnN0IGFycm93UmlnaHRCbG9jayA9IGNyZWF0ZSgnZGl2JywgJ2xpc3QtbGlzdEhlYWRlcl9fcmlnaHQgbGlzdF9fYXJyb3dzJyk7XHJcbmNvbnN0IGxlZnRBcnJvdyA9IGNyZWF0ZSgnc3BhbicsICdtYXRlcmlhbC1pY29ucycpO1xyXG5jb25zdCByaWdodEFycm93ID0gY3JlYXRlKCdzcGFuJywgJ21hdGVyaWFsLWljb25zJyk7XHJcbmNvbnN0IGxpc3QgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubGlzdCcpO1xyXG5jb25zdCBsaXN0SGVhZGVyID0gY3JlYXRlKCdkaXYnLCAnbGlzdC1saXN0SGVhZGVyJyk7XHJcbmNvbnN0IGxpc3RIZWFkZXJJbmZvID0gY3JlYXRlKCdkaXYnLCAnbGlzdEhlYWRlcl9faW5mbycpXHJcbmNvbnN0IGxpc3RIZWFkZXJUaXRsZVRleHQgPSBjcmVhdGUoJ3NwYW4nLCAnbGlzdC1saXN0SGVhZGVyX190aXRsZScpO1xyXG5jb25zdCBsaXN0SGVhZGVyVGl0bGVBbW91bnQgPSBjcmVhdGUoJ3NwYW4nLCAnbGlzdC1saXN0SGVhZGVyX19hbW91bnQnKTtcclxuY29uc3QgbGlzdE9mQ291bnRyaWVzID0gY3JlYXRlKCdkaXYnLCAnbGlzdC1jb3VudHJpZXMnKTtcclxuY29uc3QgbGlzdE9mQ291bnRyaWVzVWwgPSBjcmVhdGUoJ3VsJywgJ2xpc3QtY291bnRyaWVzLXVsJyk7XHJcbmNvbnN0IGhlYWRlckFyciA9IFsnR2xvYmFsIGNvbmZpcm1lZCcsICdHbG9iYWwgZGVhdGhzJywgJ0dsb2JhbCByZWNvdmVyZWQnXTtcclxuY29uc3QgY291bnRyaWVzQXJyID0gWydDb25maXJtZWQnLCAnRGV0aHMnLCAnUmVjb3ZlcmVkJ107XHJcbmNvbnN0IGtleXNGb3JMaXN0ID0ge1xyXG4gIFRvdGFsRGVhdGhzOiAxLFxyXG4gIFRvdGFsUmVjb3ZlcmVkOiAyLFxyXG4gIFRvdGFsQ29uZmlybWVkOiAwXHJcbn07XHJcbmNvbnN0IHJlcXVlc3RPcHRpb25zID0ge1xyXG4gIG1ldGhvZDogJ0dFVCcsXHJcbiAgcmVkaXJlY3Q6ICdmb2xsb3cnXHJcbn07XHJcbmxldCBzZXRlZCA9IGZhbHNlO1xyXG5sZXQgcmVzdWx0R2xvYmFsO1xyXG5sZXQgY291bnRlciA9IDA7XHJcbmZ1bmN0aW9uIHNvcnRSZXN1bHRCeUN1cnJlbnRDYXR0ZWdvcnkoY291bnRlcikge1xyXG4gIGxldCByZXM7XHJcbiAgc3dpdGNoIChjb3VudGVyKSB7XHJcbiAgICBjYXNlIDE6XHJcbiAgICAgIHJlcyA9IHJlc3VsdEdsb2JhbC5Db3VudHJpZXMuc29ydCgoYSwgYikgPT4gYi5Ub3RhbERlYXRocyAtIGEuVG90YWxEZWF0aHMpO1xyXG4gICAgICBicmVhaztcclxuICAgIGNhc2UgMjpcclxuICAgICAgcmVzID0gcmVzdWx0R2xvYmFsLkNvdW50cmllcy5zb3J0KChhLCBiKSA9PiBiLlRvdGFsUmVjb3ZlcmVkIC0gYS5Ub3RhbFJlY292ZXJlZCk7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgZGVmYXVsdDpcclxuICAgICAgcmVzID0gcmVzdWx0R2xvYmFsLkNvdW50cmllcy5zb3J0KChhLCBiKSA9PiBiLlRvdGFsQ29uZmlybWVkIC0gYS5Ub3RhbENvbmZpcm1lZCk7XHJcbiAgICAgIGJyZWFrO1xyXG4gIH07XHJcbiAgcmV0dXJuIHJlcztcclxufTtcclxuZnVuY3Rpb24gZ2V0RGF0YShyZXN1bHQpIHtcclxuICByZXN1bHRHbG9iYWwgPSByZXN1bHQ7XHJcbiAgaGVhZGVySW5mb0J1aWxkZXIoKTtcclxuICBjb3VudHJpZXNMaXN0QnVpbGRlcigpO1xyXG59O1xyXG5mdW5jdGlvbiBzZW5kRGF0YShkYXRhKSB7XHJcbiAgY29uc29sZS5sb2coZGF0YSk7XHJcbn07XHJcbmZ1bmN0aW9uIGNoYW5nZUVsKGVsLCB0b0NoYW5nZSkge1xyXG4gIGVsLmlubmVySFRNTCA9IGAke3RvQ2hhbmdlfWA7XHJcbn07XHJcbmZ1bmN0aW9uIGNsZWFyRWwoZWwpIHtcclxuICBlbC5pbm5lckhUTUwgPSAnJztcclxufTtcclxuZnVuY3Rpb24gZ2V0Q291bnRyeURhdGEoY3VycmVudENvdW50cnksIGNvdW50ZXIpIHtcclxuICBsZXQgcmVzO1xyXG4gIHN3aXRjaCAoY291bnRlcikge1xyXG4gICAgY2FzZSAxOlxyXG4gICAgICByZXMgPSBjdXJyZW50Q291bnRyeS5Ub3RhbERlYXRocztcclxuICAgICAgYnJlYWs7XHJcbiAgICBjYXNlIDI6XHJcbiAgICAgIHJlcyA9IGN1cnJlbnRDb3VudHJ5LlRvdGFsUmVjb3ZlcmVkO1xyXG4gICAgICBicmVhaztcclxuICAgIGRlZmF1bHQ6XHJcbiAgICAgIHJlcyA9IGN1cnJlbnRDb3VudHJ5LlRvdGFsQ29uZmlybWVkO1xyXG4gICAgICBicmVhaztcclxuICB9O1xyXG4gIHJldHVybiByZXM7XHJcbn07XHJcbmZ1bmN0aW9uIGNvdW50cmllc0xpc3RCdWlsZGVyKCkge1xyXG4gIHNvcnRSZXN1bHRCeUN1cnJlbnRDYXR0ZWdvcnkoY291bnRlcikuZm9yRWFjaChlbCA9PiB7XHJcbiAgICBjb25zdCBjb3VudHJ5ID0gY3JlYXRlKCdsaScsICdsaXN0LWNvdW50cmllcy11bF9fbGknKTtcclxuICAgIGNvbnN0IGNvdW50cnlOYW1lQmxvY2sgPSBjcmVhdGUoJ2RpdicsICdsaV9fbmFtZWJsb2NrJyk7XHJcbiAgICBjb25zdCBjb3VudHJ5dEluZm9CTG9jayA9IGNyZWF0ZSgnZGl2JywgJ2xpX19pbmZvYmxvY2snKTtcclxuICAgIGNvbnN0IGNvdW50cnlOYW1lID0gY3JlYXRlKCdzcGFuJywgJ25hbWVibG9ja19fbmFtZScpO1xyXG4gICAgY29uc3Qgc3JjID0gKGVsLkNvdW50cnlDb2RlKTtcclxuICAgIGNvbnN0IGNvdW50cnlGbGFnID0gY3JlYXRlKCdpbWcnLCAnbmFtZWJsb2NrX19mbGFnJywgWydzcmMnLCBgaHR0cHM6Ly93d3cuY291bnRyeWZsYWdzLmlvLyR7c3JjfS9mbGF0LzMyLnBuZ2BdKTtcclxuICAgIGNvdW50cnlOYW1lLmlubmVySFRNTCA9IGAke2VsLkNvdW50cnl9YDtcclxuICAgIGNvdW50cnlOYW1lQmxvY2suYXBwZW5kQ2hpbGQoY291bnRyeU5hbWUpO1xyXG4gICAgY291bnRyeU5hbWVCbG9jay5hcHBlbmRDaGlsZChjb3VudHJ5RmxhZyk7XHJcbiAgICBjb3VudHJ5dEluZm9CTG9jay5pbm5lckhUTUwgPSBgJHtjb3VudHJpZXNBcnJbY291bnRlcl19OiAke2dldENvdW50cnlEYXRhKGVsLCBjb3VudGVyKX1gO1xyXG4gICAgY291bnRyeS5hcHBlbmRDaGlsZChjb3VudHJ5TmFtZUJsb2NrKTtcclxuICAgIGNvdW50cnkuYXBwZW5kQ2hpbGQoY291bnRyeXRJbmZvQkxvY2spO1xyXG4gICAgbGlzdE9mQ291bnRyaWVzVWwuYXBwZW5kQ2hpbGQoY291bnRyeSk7XHJcbiAgICBjb3VudHJ5LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xyXG4gICAgICBpZiAoIXNldGVkKSB7XHJcbiAgICAgICAgc2V0ZWQgPSB0cnVlO1xyXG4gICAgICAgIGNvdW50cnkuY2xhc3NMaXN0LmFkZCgnc2V0Jyk7XHJcbiAgICAgICAgc2VuZERhdGEoZWwpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5zZXQnKS5jbGFzc0xpc3QucmVtb3ZlKCdzZXQnKTtcclxuICAgICAgICBjb3VudHJ5LmNsYXNzTGlzdC5hZGQoJ3NldCcpO1xyXG4gICAgICAgIHNlbmREYXRhKGVsKTtcclxuICAgICAgfTtcclxuICAgIH0pO1xyXG4gIH0pO1xyXG59O1xyXG5mdW5jdGlvbiBoZWFkZXJJbmZvQnVpbGRlcigpIHtcclxuICBsZWZ0QXJyb3cuaW5uZXJIVE1MID0gJ2Fycm93X2xlZnQnO1xyXG4gIHJpZ2h0QXJyb3cuaW5uZXJIVE1MID0gJ2Fycm93X3JpZ2h0JztcclxuICBhcnJvd0xlZnRCbG9jay5hcHBlbmRDaGlsZChsZWZ0QXJyb3cpO1xyXG4gIGFycm93UmlnaHRCbG9jay5hcHBlbmRDaGlsZChyaWdodEFycm93KTtcclxuICBsaXN0SGVhZGVySW5mby5hcHBlbmRDaGlsZChsaXN0SGVhZGVyVGl0bGVUZXh0KTtcclxuICBsaXN0SGVhZGVySW5mby5hcHBlbmRDaGlsZChsaXN0SGVhZGVyVGl0bGVBbW91bnQpO1xyXG4gIGxpc3RIZWFkZXJUaXRsZVRleHQuaW5uZXJIVE1MID0gaGVhZGVyQXJyW2NvdW50ZXJdO1xyXG4gIGxpc3RIZWFkZXJUaXRsZUFtb3VudC5pbm5lckhUTUwgPSByZXN1bHRHbG9iYWwuR2xvYmFsLlRvdGFsQ29uZmlybWVkO1xyXG4gIGxpc3RIZWFkZXIuYXBwZW5kQ2hpbGQoYXJyb3dMZWZ0QmxvY2spO1xyXG4gIGxpc3RIZWFkZXIuYXBwZW5kQ2hpbGQobGlzdEhlYWRlckluZm8pO1xyXG4gIGxpc3RIZWFkZXIuYXBwZW5kQ2hpbGQoYXJyb3dSaWdodEJsb2NrKTtcclxuICBsaXN0T2ZDb3VudHJpZXMuYXBwZW5kQ2hpbGQobGlzdE9mQ291bnRyaWVzVWwpO1xyXG4gIGxpc3QuYXBwZW5kQ2hpbGQobGlzdEhlYWRlcik7XHJcbiAgbGlzdC5hcHBlbmRDaGlsZChsaXN0T2ZDb3VudHJpZXMpO1xyXG4gIGxlZnRBcnJvdy5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcclxuICAgIGNvdW50ZXIgPSAoY291bnRlcikgPyBjb3VudGVyIC0gMSA6IDI7XHJcbiAgICBjb25zb2xlLmxvZyhjb3VudGVyKTtcclxuICAgIGFycm93Q2xpY2soY291bnRlcik7XHJcbiAgICBzZXRlZCA9IGZhbHNlO1xyXG4gIH0pO1xyXG4gIHJpZ2h0QXJyb3cuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XHJcbiAgICBjb3VudGVyID0gTWF0aC5hYnMoY291bnRlciArIDEpICUgMztcclxuICAgIGFycm93Q2xpY2soY291bnRlcik7XHJcbiAgICBzZXRlZCA9IGZhbHNlO1xyXG4gIH0pO1xyXG59O1xyXG5mdW5jdGlvbiBhcnJvd0NsaWNrKGNvdW50ZXIpIHtcclxuICBzd2l0Y2ggKGNvdW50ZXIpIHtcclxuICAgIGNhc2UgMTpcclxuICAgICAgY2xlYXJFbChsaXN0T2ZDb3VudHJpZXNVbCk7XHJcbiAgICAgIGNoYW5nZUVsKGxpc3RIZWFkZXJUaXRsZVRleHQsIGhlYWRlckFycltjb3VudGVyXSk7XHJcbiAgICAgIGNoYW5nZUVsKGxpc3RIZWFkZXJUaXRsZUFtb3VudCwgcmVzdWx0R2xvYmFsLkdsb2JhbC5Ub3RhbERlYXRocyk7XHJcbiAgICAgIGNvdW50cmllc0xpc3RCdWlsZGVyKCk7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgY2FzZSAyOlxyXG4gICAgICBjbGVhckVsKGxpc3RPZkNvdW50cmllc1VsKTtcclxuICAgICAgY2hhbmdlRWwobGlzdEhlYWRlclRpdGxlVGV4dCwgaGVhZGVyQXJyW2NvdW50ZXJdKTtcclxuICAgICAgY2hhbmdlRWwobGlzdEhlYWRlclRpdGxlQW1vdW50LCByZXN1bHRHbG9iYWwuR2xvYmFsLlRvdGFsUmVjb3ZlcmVkKTtcclxuICAgICAgY291bnRyaWVzTGlzdEJ1aWxkZXIoKTtcclxuICAgICAgYnJlYWs7XHJcbiAgICBkZWZhdWx0OlxyXG4gICAgICBjbGVhckVsKGxpc3RPZkNvdW50cmllc1VsKTtcclxuICAgICAgY2hhbmdlRWwobGlzdEhlYWRlclRpdGxlVGV4dCwgaGVhZGVyQXJyW2NvdW50ZXJdKTtcclxuICAgICAgY2hhbmdlRWwobGlzdEhlYWRlclRpdGxlQW1vdW50LCByZXN1bHRHbG9iYWwuR2xvYmFsLlRvdGFsQ29uZmlybWVkKTtcclxuICAgICAgY291bnRyaWVzTGlzdEJ1aWxkZXIoKTtcclxuICAgICAgYnJlYWs7XHJcbiAgfTtcclxufTtcclxuXHJcbndpbmRvdy5vbmxvYWQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgZmV0Y2goXCJodHRwczovL2FwaS5jb3ZpZDE5YXBpLmNvbS9zdW1tYXJ5XCIsIHJlcXVlc3RPcHRpb25zKVxyXG4gICAgLnRoZW4ocmVzcG9uc2UgPT4gcmVzcG9uc2UuanNvbigpKVxyXG4gICAgLnRoZW4ocmVzdWx0ID0+IGdldERhdGEocmVzdWx0KSlcclxuICAgIC5jYXRjaChlcnJvciA9PiBjb25zb2xlLmxvZygnZXJyb3InLCBlcnJvcikpO1xyXG59XHJcbiIsImltcG9ydCAnLi9jc3Mvc3R5bGUuY3NzJztcclxuaW1wb3J0ICcuL2Nzcy9saXN0LmNzcydcclxuaW1wb3J0ICcuL21vZHVsZXMvY29tcG9uZW50cy9Db3VudHJ5TGlzdC5jb21wb25lbnQnO1xyXG5jb25zb2xlLmxvZygnaGVsbG8nKTtcclxuIl0sInNvdXJjZVJvb3QiOiIifQ==